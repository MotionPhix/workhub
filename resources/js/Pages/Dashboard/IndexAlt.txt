<script setup lang="ts">
import {ref, onMounted, computed} from 'vue'
import {gsap} from 'gsap'
import VueApexCharts from 'vue3-apexcharts'
import {
  Clock,
  CheckCircle,
  TrendingUp,
  Activity,
  Sun,
  Sunset,
  Moon,
  AlertCircle
} from 'lucide-vue-next'
import AppLayout from "@/Layouts/AppLayout.vue";

// Types
const props = defineProps<{
  base_metrics: {
    total_work_logs: number
    total_hours: number
    average_hours_per_day: number
    completed_tasks: number
  }
  recent_activity: {
    recent_entries: any[]
    activity_summary: {
      total_entries_this_month: number
      total_hours_this_month: number
      completion_rate: number
      daily_average: number
    }
  }
  personal_metrics: {
    productivity_score: ProductivityScore
    completion_rate: CompletionRate
    work_pattern: WorkPattern
  }
  performance_insights: {
    trend: PerformanceTrend
    recommendations: string[]
  }
}>()

// Reactive state
const productivityScore = ref(0)
const activeTab = ref('overview')

// Computed
const productivityChartOptions = computed(() => ({
  chart: {
    type: 'radialBar',
    height: 250,
    animations: {
      enabled: true,
      easing: 'easeinout',
      speed: 800,
    },
  },
  plotOptions: {
    radialBar: {
      startAngle: -90,
      endAngle: 90,
      hollow: {
        margin: 0,
        size: '70%',
      },
      track: {
        background: '#e7e7e7',
        strokeWidth: '97%',
        dropShadow: {
          enabled: true,
          top: 2,
          left: 0,
          blur: 4,
          opacity: 0.15
        }
      },
      dataLabels: {
        name: {
          show: true,
          color: '#888',
          fontSize: '17px'
        },
        value: {
          offsetY: -2,
          fontSize: '22px',
          color: '#111',
          formatter: (val: number) => `${val}%`
        }
      }
    }
  },
  fill: {
    type: 'gradient',
    gradient: {
      shade: 'dark',
      type: 'horizontal',
      shadeIntensity: 0.5,
      gradientToColors: ['#ABE5A1'],
      inverseColors: true,
      opacityFrom: 1,
      opacityTo: 1,
      stops: [0, 100]
    }
  },
  stroke: {
    lineCap: 'round'
  },
  series: [productivityScore.value],
  labels: ['Productivity']
}))

const workPatternChartOptions = computed(() => ({
  chart: {
    type: 'area',
    height: 350,
    toolbar: {
      show: false
    },
    animations: {
      enabled: true,
      easing: 'easeinout',
      speed: 800,
    }
  },
  dataLabels: {
    enabled: false
  },
  stroke: {
    curve: 'smooth',
    width: 2
  },
  fill: {
    type: 'gradient',
    gradient: {
      shadeIntensity: 1,
      opacityFrom: 0.7,
      opacityTo: 0.9,
      stops: [0, 90, 100]
    }
  },
  series: [{
    name: 'Efficiency',
    data: [
      props.personal_metrics.work_pattern.peak_productivity.morning.efficiency,
      props.personal_metrics.work_pattern.peak_productivity.afternoon.efficiency,
      props.personal_metrics.work_pattern.peak_productivity.evening.efficiency
    ]
  }],
  xaxis: {
    categories: ['Morning', 'Afternoon', 'Evening'],
    labels: {
      style: {
        colors: '#888'
      }
    }
  },
  yaxis: {
    labels: {
      formatter: (val: number) => `${val}%`
    }
  },
  theme: {
    mode: 'light',
    palette: 'palette1'
  }
}))

// Lifecycle
onMounted(() => {
  gsap.to(productivityScore, {
    value: props.personal_metrics.productivity_score.score,
    duration: 2,
    ease: 'power2.out'
  })
})
</script>

<template>
  <AppLayout>
    <div class="p-6 space-y-6">
      <!-- Header Section -->
      <div class="flex justify-between items-center">
        <h1 class="text-2xl font-bold text-gray-900 dark:text-white">
          Performance Dashboard
        </h1>
        <div class="flex space-x-2">
          <button
            v-for="tab in ['overview', 'productivity', 'insights']"
            :key="tab"
            @click="activeTab = tab"
            :class="[
            'px-4 py-2 rounded-lg transition-colors',
            activeTab === tab
              ? 'bg-primary text-white'
              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
          ]"
          >
            {{ tab.charAt(0).toUpperCase() + tab.slice(1) }}
          </button>
        </div>
      </div>

      <!-- Key Metrics Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div
          v-for="(metric, index) in [
          {
            icon: Clock,
            title: 'Total Hours',
            value: base_metrics.total_hours,
            suffix: 'hrs'
          },
          {
            icon: CheckCircle,
            title: 'Completed Tasks',
            value: base_metrics.completed_tasks,
            suffix: 'tasks'
          },
          {
            icon: TrendingUp,
            title: 'Completion Rate',
            value: recent_activity.activity_summary.completion_rate,
            suffix: '%'
          },
          {
            icon: Activity,
            title: 'Daily Average',
            value: recent_activity.activity_summary.daily_average,
            suffix: 'hrs/day'
          }
        ]"
          :key="index"
          class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm"
        >
          <div class="flex items-center space-x-4">
            <component
              :is="metric.icon"
              class="w-8 h-8 text-primary"
            />
            <div>
              <h3 class="text-sm text-gray-500 dark:text-gray-400">
                {{ metric.title }}
              </h3>
              <p class="text-2xl font-bold text-gray-900 dark:text-white">
                {{ metric.value }}{{ metric.suffix }}
              </p>
            </div>
          </div>
        </div>
      </div>

      <!-- Charts Section -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Productivity Score -->
        <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">
          <h3 class="text-lg font-semibold mb-4">Productivity Score</h3>
          <VueApexCharts
            type="radialBar"
            height="350"
            :options="productivityChartOptions"
            :series="[productivityScore]"
          />
        </div>

        <!-- Work Pattern -->
        <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">
          <h3 class="text-lg font-semibold mb-4">Daily Work Pattern</h3>
          <VueApexCharts
            type="area"
            height="350"
            :options="workPatternChartOptions"
            :series="workPatternChartOptions.series"
          />
        </div>
      </div>

      <!-- Recommendations -->
      <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">
        <h3 class="text-lg font-semibold mb-4">Recommendations</h3>
        <div class="space-y-3">
          <div
            v-for="(recommendation, index) in performance_insights.recommendations"
            :key="index"
            class="flex items-start space-x-3"
          >
            <AlertCircle class="w-5 h-5 text-primary mt-0.5"/>
            <p class="text-gray-600 dark:text-gray-300">{{ recommendation }}</p>
          </div>
        </div>
      </div>
    </div>
  </AppLayout>
</template>

<style scoped>
.card-zoom {
  @apply transition-transform duration-300 hover:scale-105;
}

.chart-container {
  @apply relative w-full h-[350px];
}
</style>
