<script setup lang="ts">
import { ref, onMounted, computed } from 'vue'
import VueApexCharts from 'vue3-apexcharts'
import { gsap } from 'gsap'
import {
  Users,
  Building2,
  CheckCircle,
  Activity,
  TrendingUp,
  BarChart3,
  AlertCircle
} from 'lucide-vue-next'

interface AdminDashboardProps {
  base_metrics: {
    total_work_logs: number
    total_hours: number
    average_hours_per_day: number
    completed_tasks: number
  }
  recent_activity: {
    recent_entries: Array<any>
    activity_summary: {
      total_entries_this_month: number
      total_hours_this_month: number
      completion_rate: number
      daily_average: number
    }
  }
  system_metrics: {
    total_users: number
    active_users: number
    total_departments: number
    verified_users_percentage: number
  }
  organization_metrics: {
    company_wide_efficiency: number
    total_projects: number
    active_projects: number
    department_performance: Array<{
      name: string
      efficiency: number
      total_tasks: number
      completed_tasks: number
      total_hours: number
      member_count: number
    }>
  }
  activity_trends: Array<any>
}

interface EnhancedAdminDashboardProps extends AdminDashboardProps {
  user_metrics: {
    onboarding_status: {
      completed: number
      pending: number
      completion_rate: number
    }
    activity_logs: {
      last_24h: number
      last_7d: number
      trend: 'increasing' | 'decreasing' | 'stable'
    }
    department_distribution: Array<{
      department_id: string
      count: number
      percentage: number
    }>
  }
  department_analytics: {
    resource_utilization: {
      allocated_hours: number
      actual_hours: number
      utilization_rate: number
    }
    cross_department_collaboration: {
      collaborating_departments: string[]
      shared_projects: number
      collaboration_score: number
    }
    performance_trends: {
      weekly_efficiency: number[]
      monthly_completion_rates: number[]
      year_over_year_growth: number
    }
  }
}

const props = defineProps<EnhancedAdminDashboardProps>()

// Reactive state
const activeView = ref('overview')
const selectedTimeframe = ref('month')

// Computed properties for charts
const departmentEfficiencyChartOptions = computed(() => ({
  chart: {
    type: 'bar',
    height: 350,
    toolbar: { show: false },
    animations: {
      enabled: true,
      easing: 'easeinout',
      speed: 800
    }
  },
  plotOptions: {
    bar: {
      horizontal: true,
      borderRadius: 4,
      dataLabels: {
        position: 'top'
      }
    }
  },
  colors: ['#3B82F6'],
  dataLabels: {
    enabled: true,
    formatter: (val: number) => `${val}%`,
    offsetX: 30
  },
  xaxis: {
    categories: props.organization_metrics.department_performance.map(d => d.name),
    labels: {
      style: { colors: '#64748b' }
    }
  },
  yaxis: {
    max: 100
  }
}))

const departmentEfficiencySeries = computed(() => [{
  name: 'Efficiency',
  data: props.organization_metrics.department_performance.map(d => d.efficiency)
}])

const userActivityChartOptions = computed(() => ({
  chart: {
    type: 'donut',
    height: 350
  },
  labels: ['Active Users', 'Inactive Users'],
  colors: ['#3B82F6', '#E5E7EB'],
  plotOptions: {
    pie: {
      donut: {
        size: '70%'
      }
    }
  },
  legend: {
    position: 'bottom'
  }
}))

const userActivitySeries = computed(() => [
  props.system_metrics.active_users,
  props.system_metrics.total_users - props.system_metrics.active_users
])

// Methods
const getEfficiencyColor = (efficiency: number): string => {
  if (efficiency >= 75) return 'text-green-500'
  if (efficiency >= 50) return 'text-yellow-500'
  return 'text-red-500'
}

const userOnboardingChartOptions = computed(() => ({
  chart: {
    type: 'radialBar',
    height: 350
  },
  plotOptions: {
    radialBar: {
      hollow: {
        size: '70%'
      },
      dataLabels: {
        name: {
          fontSize: '22px'
        },
        value: {
          fontSize: '16px',
          formatter: (val: number) => `${val}%`
        }
      }
    }
  },
  labels: ['Onboarding Complete'],
  colors: ['#3B82F6']
}))

const userOnboardingSeries = computed(() => [
  props.user_metrics.onboarding_status.completion_rate
])

const departmentCollaborationChartOptions = computed(() => ({
  chart: {
    type: 'radar',
    height: 350,
    toolbar: { show: false }
  },
  xaxis: {
    categories: props.organization_metrics.department_performance.map(d => d.name)
  },
  markers: {
    size: 4
  },
  fill: {
    opacity: 0.7
  }
}))

const departmentCollaborationSeries = computed(() => [{
  name: 'Collaboration Score',
  data: props.department_analytics.cross_department_collaboration.collaborating_departments
    .map(dept => props.department_analytics.cross_department_collaboration.collaboration_score)
}])

// Add new methods for enhanced functionality
const getActivityTrend = (trend: string) => {
  const trends = {
    increasing: 'text-green-500',
    decreasing: 'text-red-500',
    stable: 'text-blue-500'
  }
  return trends[trend as keyof typeof trends] || 'text-gray-500'
}

const getUtilizationStatus = (rate: number) => {
  if (rate > 90) return 'Overutilized'
  if (rate > 70) return 'Optimal'
  return 'Underutilized'
}

// Lifecycle hooks
onMounted(() => {
  gsap.from('.metric-card', {
    y: 20,
    opacity: 0,
    duration: 0.6,
    stagger: 0.1,
    ease: 'power2.out'
  })
})
</script>

<template>
  <div class="p-6 space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <h1 class="text-2xl font-bold text-gray-900 dark:text-white">
        Organization Dashboard
      </h1>
      <div class="flex space-x-2">
        <button
          v-for="view in ['overview', 'departments', 'users']"
          :key="view"
          @click="activeView = view"
          :class="[
            'px-4 py-2 rounded-lg transition-colors',
            activeView === view
              ? 'bg-primary text-white'
              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
          ]">
          {{ view.charAt(0).toUpperCase() + view.slice(1) }}
        </button>
      </div>
    </div>

    <!-- System Metrics -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <div
        v-for="(metric, index) in [
          {
            icon: Users,
            title: 'Total Users',
            value: system_metrics.total_users,
            subtitle: `${system_metrics.active_users} active`
          },
          {
            icon: Building2,
            title: 'Departments',
            value: system_metrics.total_departments,
            subtitle: 'Total departments'
          },
          {
            icon: CheckCircle,
            title: 'Verified Users',
            value: system_metrics.verified_users_percentage,
            subtitle: 'Verification rate',
            suffix: '%'
          },
          {
            icon: Activity,
            title: 'Company Efficiency',
            value: organization_metrics.company_wide_efficiency,
            subtitle: 'Overall performance',
            suffix: '%'
          }
        ]"
        :key="index"
        class="metric-card bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm"
      >
        <div class="flex items-center space-x-4">
          <component
            :is="metric.icon"
            class="w-8 h-8 text-primary"
          />
          <div>
            <h3 class="text-sm text-gray-500 dark:text-gray-400">
              {{ metric.title }}
            </h3>
            <p class="text-2xl font-bold text-gray-900 dark:text-white">
              {{ metric.value }}{{ metric.suffix || '' }}
            </p>
            <p class="text-sm text-gray-500">{{ metric.subtitle }}</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Charts Section -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <!-- Department Efficiency -->
      <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">
        <h3 class="text-lg font-semibold mb-6">Department Efficiency</h3>
        <VueApexCharts
          type="bar"
          height="350"
          :options="departmentEfficiencyChartOptions"
          :series="departmentEfficiencySeries"
        />
      </div>

      <!-- User Activity -->
      <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">
        <h3 class="text-lg font-semibold mb-6">User Activity Distribution</h3>
        <VueApexCharts
          type="donut"
          height="350"
          :options="userActivityChartOptions"
          :series="userActivitySeries"
        />
      </div>
    </div>

    <!-- Department Details -->
    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">
      <h3 class="text-lg font-semibold mb-6">Department Performance</h3>
      <div class="overflow-x-auto">
        <table class="min-w-full">
          <thead>
          <tr class="border-b dark:border-gray-700">
            <th class="text-left py-3 px-4">Department</th>
            <th class="text-left py-3 px-4">Members</th>
            <th class="text-left py-3 px-4">Tasks</th>
            <th class="text-left py-3 px-4">Hours</th>
            <th class="text-left py-3 px-4">Efficiency</th>
          </tr>
          </thead>
          <tbody>
          <tr
            v-for="dept in organization_metrics.department_performance"
            :key="dept.name"
            class="border-b dark:border-gray-700"
          >
            <td class="py-3 px-4">{{ dept.name }}</td>
            <td class="py-3 px-4">{{ dept.member_count }}</td>
            <td class="py-3 px-4">
              {{ dept.completed_tasks }}/{{ dept.total_tasks }}
            </td>
            <td class="py-3 px-4">{{ dept.total_hours }}h</td>
            <td class="py-3 px-4">
                <span :class="getEfficiencyColor(dept.efficiency)">
                  {{ dept.efficiency }}%
                </span>
            </td>
          </tr>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Projects Overview -->
    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-lg font-semibold">Projects Overview</h3>
        <div class="flex items-center space-x-4">
          <div class="flex items-center space-x-2">
            <span class="text-sm text-gray-500">Total Projects:</span>
            <span class="font-semibold">
              {{ organization_metrics.total_projects }}
            </span>
          </div>
          <div class="flex items-center space-x-2">
            <span class="text-sm text-gray-500">Active Projects:</span>
            <span class="font-semibold">
              {{ organization_metrics.active_projects }}
            </span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">
    <div class="flex justify-between items-center mb-6">
      <h3 class="text-lg font-semibold">User Management</h3>
      <button class="btn-primary">View All Users</button>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <!-- Onboarding Status -->
      <div class="space-y-4">
        <h4 class="font-medium">Onboarding Status</h4>
        <VueApexCharts
          type="radialBar"
          height="250"
          :options="userOnboardingChartOptions"
          :series="userOnboardingSeries"
        />
        <div class="text-center">
          <p class="text-sm text-gray-500">
            {{ props.user_metrics.onboarding_status.pending }} users pending
          </p>
        </div>
      </div>

      <!-- Activity Logs -->
      <div class="space-y-4">
        <h4 class="font-medium">Recent Activity</h4>
        <div class="space-y-2">
          <div class="flex justify-between items-center">
            <span>Last 24 Hours</span>
            <span class="font-medium">
              {{ props.user_metrics.activity_logs.last_24h }} activities
            </span>
          </div>
          <div class="flex justify-between items-center">
            <span>Last 7 Days</span>
            <span class="font-medium">
              {{ props.user_metrics.activity_logs.last_7d }} activities
            </span>
          </div>
          <div class="flex items-center space-x-2">
            <TrendingUp
              class="w-4 h-4"
              :class="getActivityTrend(props.user_metrics.activity_logs.trend)"
            />
            <span :class="getActivityTrend(props.user_metrics.activity_logs.trend)">
              {{ props.user_metrics.activity_logs.trend }}
            </span>
          </div>
        </div>
      </div>

      <!-- Department Distribution -->
      <div class="space-y-4">
        <h4 class="font-medium">Department Distribution</h4>
        <div class="space-y-2">
          <div
            v-for="dept in props.user_metrics.department_distribution"
            :key="dept.department_id"
            class="flex justify-between items-center"
          >
            <span>{{ dept.department_id }}</span>
            <span class="font-medium">{{ dept.percentage }}%</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- New Department Analytics Section -->
  <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">
    <div class="flex justify-between items-center mb-6">
      <h3 class="text-lg font-semibold">Department Analytics</h3>
      <div class="flex space-x-2">
        <button
          v-for="period in ['Week', 'Month', 'Quarter']"
          :key="period"
          class="px-3 py-1 rounded-md text-sm"
          :class="selectedTimeframe === period.toLowerCase()
            ? 'bg-primary text-white'
            : 'bg-gray-100 text-gray-600'"
          @click="selectedTimeframe = period.toLowerCase()"
        >
          {{ period }}
        </button>
      </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <!-- Resource Utilization -->
      <div class="space-y-4">
        <h4 class="font-medium">Resource Utilization</h4>
        <div class="space-y-2">
          <div class="flex justify-between items-center">
            <span>Allocated Hours</span>
            <span class="font-medium">
              {{ props.department_analytics.resource_utilization.allocated_hours }}h
            </span>
          </div>
          <div class="flex justify-between items-center">
            <span>Actual Hours</span>
            <span class="font-medium">
              {{ props.department_analytics.resource_utilization.actual_hours }}h
            </span>
          </div>
          <div class="flex justify-between items-center">
            <span>Utilization Rate</span>
            <span
              class="font-medium"
              :class="getEfficiencyColor(props.department_analytics.resource_utilization.utilization_rate)"
            >
              {{ props.department_analytics.resource_utilization.utilization_rate }}%
            </span>
          </div>
        </div>
      </div>

      <!-- Cross-Department Collaboration -->
      <div class="space-y-4">
        <h4 class="font-medium">Department Collaboration</h4>
        <VueApexCharts
          type="radar"
          height="300"
          :options="departmentCollaborationChartOptions"
          :series="departmentCollaborationSeries"
        />
      </div>
    </div>
  </div>
</template>

<style scoped>
.metric-card {
  @apply transition-all duration-300 hover:shadow-md;
}
</style>
